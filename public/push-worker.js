// This is a dedicated service worker for handling push notifications.
// It's imported by the main service worker generated by next-pwa.

self.addEventListener('push', (event) => {
  console.log('[Push Worker] Push Received.');
  if (!event.data) {
    console.error('[Push Worker] Push event but no data');
    return;
  }

  try {
    const data = event.data.json();
    console.log('[Push Worker] Push data:', data);

    const title = data.title || 'ChirpChat';
    const options = {
      body: data.options.body || 'You have a new notification.',
      icon: data.options.icon || '/icons/icon-192.png',
      badge: data.options.badge || '/icons/badge-96x96.png',
      tag: data.options.tag || 'chirpchat-notification',
      data: data.options.data || { url: '/chat' }, // Default to opening the chat page
    };

    event.waitUntil(self.registration.showNotification(title, options));
  } catch (e) {
    console.error('[Push Worker] Error parsing push data:', e);
    // Fallback notification if JSON parsing fails
    event.waitUntil(
      self.registration.showNotification('ChirpChat', {
        body: 'You have a new message.',
        icon: '/icons/icon-192.png',
      })
    );
  }
});

self.addEventListener('notificationclick', (event) => {
  console.log('[Push Worker] Notification click Received.');

  event.notification.close();

  const openUrl = event.notification.data?.conversationId 
    ? `/chat?conversationId=${event.notification.data.conversationId}` 
    : '/chat';

  event.waitUntil(
    clients.matchAll({
      type: 'window',
      includeUncontrolled: true
    }).then((clientList) => {
      // Check if there's already a window open.
      for (const client of clientList) {
        if (client.url.includes(openUrl.split('?')[0]) && 'focus' in client) {
          return client.focus();
        }
      }
      // If not, open a new window.
      if (clients.openWindow) {
        return clients.openWindow(openUrl);
      }
    })
  );
});
